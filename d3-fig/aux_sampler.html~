<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <script src="js/d3.v4.min.js"></script>
    <script type="text/javascript" src="../json/sdb_proposal.js"></script><!--var sdb_paths-->
    <style type="text/css">
      .axis path,
      .axis line{
      fill: none;
      stroke: black;
      shape-rendering: crispEdges;
      }
      .axis text {
      font-family: sans-serif;
      font-size: 11px;
      }
      .line {
      fill: none;
      stroke: orange;
      shape-rendering: crispEdges;
      }
      .bar rect {
      fill: steelblue;
      }
      .axisColoured line{
      stroke: orange;
      }
      .axisColoured path{
      stroke: orange;
      }
      .axisColoured text{
      fill: orange;
      }
      .svg-container {
      display: block;
      margin: auto;
      position: relative;
      //width: 100vh;
      height: 100%;
      max-width: 100vh;
      max-height 100vh;
      padding-bottom: 100%; /* aspect ratio */
      vertical-align: middle;
      horizontal-align: middle;
      overflow: hidden;
      }
      .svg-content-responsive {
      display: inline-block;
      position: absolute;
      height: 100%;
      width: 100%;
      top: 10px;
      left: 0;
      }
      
    </style>
  </head>
  <div class="plot_canvas">
  </div>
  <body>
    <script>
      
      var t0 = 0.0;
      var T = 1.0;
      var col_violet = "#352245"
      var col_white = "#FFFFFF"
      var col_orange = "#F86942"
      var col_blue = "#3DABB2"
      
      var margin = {top: 0, right: 20, bottom: 20, left: 40}
      var width = 900;
      var height = 400;
      var w = width - margin.left - margin.right;
      var h = height - margin.top - margin.bottom;
      
      // add path
      var line = d3.line()
      .x(function(d) { return xScale(d.time); })
      .y(function(d) { return yScale(d.path); });
      
      var M = Object.keys(sdb_paths).length;
      
      var xScale = d3.scaleLinear()
      .domain([t0, T])
      .range([margin.left, w]);
      
      var yScale = d3.scaleLinear()
      .domain([d3.min(sdb_paths, function(d) { return d3.min(d, function(d2){ return d2.path;}); }),
      d3.max(sdb_paths, function(d) { return d3.max(d, function(d2){return d2.path;}); })])
      .range([h, margin.bottom]);
      
      var yAxis = d3.axisLeft()
      .scale(yScale)
      .ticks(6);

      // create svg objects
      var svg = d3.select(".plot_canvas")
      .classed("svg-container", true)
      .append("svg")
      .attr("preserveAspectRatio", "xMinYMin meet")
      .attr("viewBox", "0 0 " + String(w + margin.left + margin.right) + " " + String(h + margin.top + margin.bottom))
      .classed("svg-content-responsive", true);

      path_forw = svg.append("g");
      path_back = svg.append("g");
      path_concat = svg.append("g");
      pt_x0 = svg.append("g");
      pt_xT = svg.append("g");
      pt_x0_transf = svg.append("g");
      pt_tau = svg.append("g");

      pt_x0.selectAll("circle")
      .data(sdb_paths[4]).enter()
      .append("circle")
      .attr("cx", function (d) { return xScale(d.time); })
      .attr("cy", function (d) { return yScale(d.path); })
      .attr("r", "12px")
      .attr("fill", col_blue)
      .attr("opacity", 1);

      pt_xT.selectAll("circle")
      .data(sdb_paths[5]).enter()
      .append("circle")
      .attr("cx", function (d) { return xScale(d.time); })
      .attr("cy", function (d) { return yScale(d.path); })
      .attr("r", "12px")
      .attr("fill", col_orange)
      .attr("opacity", 1);

      pt_x0_transf.selectAll("circle")
      .data(sdb_paths[5]).enter()
      .append("circle")
      .attr("cx", function (d) { return xScale(d.time); })
      .attr("cy", function (d) { return yScale(d.path); })
      .attr("r", "12px")
      .attr("fill", col_orange)
      .attr("opacity", 1);

      pt_tau.selectAll("circle")
      .data(sdb_paths[7]).enter()
      .append("circle")
      .attr("cx", function (d) { return xScale(d.time); })
      .attr("cy", function (d) { return yScale(d.path); })
      .attr("r", "42px")
      .attr("fill", "steelblue")
      .attr("opacity", 0.0);

      path_forw.append("path")
      .attr("class", "line")
      .attr("stroke", "orange")
      .attr("opacity", 0.5)
      .attr("stroke-width", 3)
      .attr("d", line(sdb_paths[0]));
      var totalLength = path_forw.selectAll("path").node().getTotalLength();
      path_forw.selectAll("path")
      .attr("stroke-dasharray", totalLength + " " + totalLength)
      .attr("stroke-dashoffset", totalLength);

      path_back.append("path")
      .attr("class", "line")
      .attr("stroke", "orange")
      .attr("opacity", 0.5)
      .attr("stroke-width", 3)
      .attr("d", line(sdb_paths[1]));
      totalLength = path_back.selectAll("path").node().getTotalLength();
      path_back.selectAll("path")
      .attr("stroke-dasharray", totalLength + " " + totalLength)
      .attr("stroke-dashoffset", totalLength);
      
      path_concat.append("path")
      .attr("class", "line")
      .attr("stroke", "orange")
      .attr("opacity", 0.0)
      .attr("stroke-width", 5)
      .attr("d", line(sdb_paths[3]));
      
      var dur1 = 1000;
      var break1 = 1000;
      
      function render (idx=0){
      if (idx == 0){
      } else{
      
      path_forw.selectAll("path").transition(0)
      .duration(dur1)
      .attr("stroke-dashoffset",0)
      .transition(0)
      .style("stroke", col_blue)
      .style("opacity", 1.0)
      .attr("stroke-dasharray", null)
      .attr("stroke-dashoffset", null);

      pt_x0_transf.selectAll("circle")
      .transition()
      .delay(dur1+break1)
      .duration(dur1)
      .attr("transform", "translate(" + String(xScale(0)-xScale(1)) + ")");

      path_back.selectAll("path").transition(0)
      .delay(2*dur1+2*break1)
      .duration(dur1)
      .attr("stroke-dashoffset",0)
      .transition(0)
      .style("stroke", col_orange)
      .style("opacity", 1.0)
      .attr("stroke-dasharray", null)
      .attr("stroke-dashoffset", null);

      path_back.selectAll("path").transition(0)
      .delay(3*dur1+3*break1)
      .duration(dur1)
      .attr("d", line(sdb_paths[2]));

      pt_x0_transf.selectAll("circle")
      .transition()
      .delay(3*dur1+3*break1)
      .duration(dur1)
      .attr("transform", "translate(" + String(xScale(1)-xScale(0)) + ")");

      pt_tau.selectAll("circle")
      .transition()
      .delay(4*dur1+4*break1)
      .duration(dur1)
      .attr("r", "6px")
      .attr("fill", "white")
      .attr("opacity", 1.0);

      
      path_concat.selectAll("path").transition(0)
      .delay(5*dur1+5*break1)
      .duration(dur1)
      .attr("opacity", 1.0);
      }
      }

render(0);

var _transitions = [
      {
      transitionForward: () => render(1),
      transitionBackward: () => render(0),
      index: 0
      },
      {
      transitionForward: () => render(1),
      index: 1
      },
      ]

      
			 </script>
  </body>
